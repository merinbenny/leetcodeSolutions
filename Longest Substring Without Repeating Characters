/*Given a string s, find the length of the longest substring without duplicate characters.

 

Example 1:

Input: s = "abcabcbb"
Output: 3
Explanation: The answer is "abc", with the length of 3.
Example 2:

Input: s = "bbbbb"
Output: 1
Explanation: The answer is "b", with the length of 1.
Example 3:

Input: s = "pwwkew"
Output: 3
Explanation: The answer is "wke", with the length of 3.
Notice that the answer must be a substring, "pwke" is a subsequence and not a substring.
 

Constraints:

0 <= s.length <= 5 * 104
s consists of English letters, digits, symbols and spaces.*/


import java.util.HashMap;

class Solution {
    public int lengthOfLongestSubstring(String s) {
        HashMap<String, Integer> substrings = new HashMap<>();
        int maxLength = 0;

        for (int i = 0; i < s.length(); i++) {
            StringBuilder sb = new StringBuilder();
            boolean[] seen = new boolean[128]; // ASCII character tracking

            for (int j = i; j < s.length(); j++) {
                char c = s.charAt(j);
                if (seen[c]) {
                    break;
                }
                seen[c] = true;
                sb.append(c);
                substrings.put(sb.toString(), sb.length());
                maxLength = Math.max(maxLength, sb.length());
            }
        }

        // Optional: print substrings and their lengths
        for (String key : substrings.keySet()) {
            System.out.println("Substring: \"" + key + "\" â†’ Length: " + substrings.get(key));
        }

        return maxLength;
    }
}
